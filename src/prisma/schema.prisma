generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  Interview     Interview[]
  sessions      Session[]
  Reusme        Reusme?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Feedback {
  id          String     @id @default(uuid())
  title       String
  description String
  interviewId String?
  Interview   Interview? @relation(fields: [interviewId], references: [id])
}

model Interview {
  id             String         @id @default(uuid())
  title          String
  companyName    String
  jobDescription String
  description    String
  difficulty     DifficultyEnum @default(ENTRY_LEVEL)
  interviewType  InterviewType  @default(TECHNICAL)
  scheduledDate  DateTime?
  scheduleLater  Boolean
  userId         String
  status         InterviewStaus @default(DRAFT)
  duration       String?
  rating         Int            @default(0)
  score          Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  feedback       Feedback[]
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum DifficultyEnum {
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR
  PRINCIPAL
}

enum InterviewType {
  TECHNICAL
  BEHAVIORAL
  SYSTEM_DESIGN
  CULTURAL_FIT
}

enum InterviewStaus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  SCHEDULED
}

model Reusme {
  id        String  @id @default(uuid())
  name      String
  resumeUrl String
  userId    String  @unique
  content   Json
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
